"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = require("crypto");
var utils_1 = require("../utils");
var DynamoBotStorage = (function () {
    function DynamoBotStorage(dynamoClient, settings) {
        this.dynamoClient = dynamoClient;
        this.settings = settings;
        var _a = settings || {}, tableName = _a.tableName, primaryKey = _a.primaryKey, ttl = _a.ttl;
        if (!dynamoClient || !tableName || !primaryKey) {
            throw new Error("Invalid constructor arguments for the DynamoBotStorage class.");
        }
        if (ttl) {
            if (!utils_1.validateTTLSettings(ttl)) {
                throw new Error("Invalid TTL settings.");
            }
            else {
                this.ttl = ttl;
            }
        }
    }
    DynamoBotStorage.prototype.getData = function (context, callback) {
        var _this = this;
        var readOps = [];
        var data = {};
        var userId = context.userId, conversationId = context.conversationId, persistUserData = context.persistUserData, persistConversationData = context.persistConversationData;
        if (userId) {
            if (persistUserData) {
                readOps.push({
                    key: userId,
                    type: "userData",
                });
            }
            if (conversationId) {
                readOps.push({
                    key: userId + ":" + conversationId,
                    type: "privateConversationData",
                });
            }
        }
        if (persistConversationData && conversationId) {
            readOps.push({
                key: conversationId,
                type: "conversationData",
            });
        }
        var _a = this.settings, tableName = _a.tableName, primaryKey = _a.primaryKey;
        Promise.all(readOps.map(function (entry) {
            return new Promise(function (resolve, reject) {
                var key = entry.key, type = entry.type;
                var item = {
                    TableName: tableName,
                    Key: (_a = {}, _a[primaryKey] = { S: key }, _a),
                };
                _this.dynamoClient.getItem(item, function (err, doc) {
                    if (err) {
                        return reject(err);
                    }
                    var docItem = doc && doc.Item || {};
                    var dataString = docItem.data && docItem.data.S && JSON.parse(docItem.data.S) || {};
                    var hashString = docItem.hash && docItem.hash.S;
                    var hashKey = type + "Hash";
                    data[type] = dataString;
                    data[hashKey] = hashString;
                    resolve();
                });
                var _a;
            });
        })).then(function () {
            callback(null, data);
        }).catch(function (error) {
            callback(error, {});
        });
    };
    DynamoBotStorage.prototype.saveData = function (context, data, callback) {
        var _this = this;
        var writeOps = [];
        var userId = context.userId, conversationId = context.conversationId, persistUserData = context.persistUserData, persistConversationData = context.persistConversationData;
        var addWrite = function (type, key, state, prevHash) {
            state = JSON.stringify(state || {});
            var hash = crypto_1.createHash("sha256").update(state);
            var newHash = hash.digest("hex");
            if (newHash !== prevHash) {
                var writeOperation = {
                    key: key,
                    data: state,
                    hash: newHash,
                    type: type,
                    lastModified: new Date().toISOString(),
                };
                if (_this.ttl) {
                    var timestamp = Math.floor(Date.now() / 1000) + _this.ttl[type];
                    writeOperation.expireAt = timestamp;
                }
                writeOps.push(writeOperation);
            }
        };
        addWrite = addWrite.bind(this);
        if (userId) {
            if (persistUserData) {
                addWrite("userData", userId, data.userData, data.userDataHash);
            }
            if (conversationId) {
                var key = userId + ":" + conversationId;
                var d = data.privateConversationData, h = data.privateConversationDataHash;
                addWrite("privateConversationData", key, d, h);
            }
        }
        if (persistConversationData && conversationId) {
            var d = data.conversationData, h = data.conversationDataHash;
            addWrite("conversationData", conversationId, d, h);
        }
        var _a = this.settings, tableName = _a.tableName, primaryKey = _a.primaryKey;
        Promise.all(writeOps.map(function (entry) {
            return new Promise(function (resolve, reject) {
                var key = entry.key, data = entry.data, hash = entry.hash, type = entry.type, lastModified = entry.lastModified, expireAt = entry.expireAt;
                var doc = {
                    TableName: tableName,
                    Item: (_a = {},
                        _a[primaryKey] = { S: key },
                        _a.data = { S: data },
                        _a.hash = { S: hash },
                        _a.type = { S: type },
                        _a.lastModified = { S: lastModified },
                        _a),
                };
                if (expireAt) {
                    doc.Item.expireAt = { N: expireAt.toString() };
                }
                _this.dynamoClient.putItem(doc, function (err) {
                    if (err) {
                        return reject(err);
                    }
                    resolve();
                });
                var _a;
            });
        })).then(function () {
            callback(null);
        }).catch(function (error) {
            callback(error);
        });
    };
    return DynamoBotStorage;
}());
exports.DynamoBotStorage = DynamoBotStorage;
//# sourceMappingURL=DynamoBotStorage.js.map